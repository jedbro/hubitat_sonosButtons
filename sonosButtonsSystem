/*


 */
metadata
{
    definition(name: "Sonos Buttons System", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Refresh"
        
        command "addChildSpeaker", ["speakerName", "speakerIP"]
        command "removeChildSpeaker", ["speakerName"]
    }
}

preferences
{
    section
    {
        input "nodeIP", "text", title: "node-sonos-http-api server IP", required: true
        input "nodeMAC", "text", title: "node-sonos-http-api server MAC", required: true
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def updated()
{
    device.setDeviceNetworkId(nodeMAC.replace(":", "").toUpperCase())
    refresh()
}

def refresh()
{
    def zonesResp = httpGetExec(nodeIP, "zones", 5005)
    refreshChildren(zonesResp)
}

def parse(resp)
{
    logDebug("parseLanMessage(resp) = ${parseLanMessage(resp)}")
    
    def zonesResp = httpGetExec(nodeIP, "zones", 5005)
    
    // refresh all children
    refreshChildren(zonesResp)
}

def refreshChildren(zonesResp)
{
    for(child in getChildDevices())
    {
        child.refreshFromParent(zonesResp)
    }
}

def addChildSpeaker(speakerName, speakerIP)
{
    logDebug("adding ${speakerName} at ${speakerIP}")
    
    def child = getChildDevice(getDNI(speakerName))
    
    if(child)
    {
        logDebug("child ${getDNI(speakerName)} already exists")
        return
    }
    
    child = addChildDevice("Sonos Buttons", getDNI(speakerName), ['isComponent': false, 'name': getDNI(speakerName)])
    if(child)
    {
        child.setupFromParent([sonosName: speakerName, sonosIP: speakerIP, nodeIP: nodeIP])
    }
}

def removeChildSpeaker(speakerName)
{
    deleteChildDevice(getDNI(speakerName))
}

def getDNI(speakerName)
{
    return "${device.displayName}-${speakerName}"
}

def getBaseURI(ipAddr, port = null)
{
    def newURI = "http://" + ipAddr
        
    return newURI + (port ? ":${port}/" : "/")
}

def httpGetExec(ipAddr, suffix, port = null)
{
    logDebug("httpGetExec(${ipAddr}, ${suffix}, ${port})")
    
    try
    {
        getString = getBaseURI(ipAddr, port) + suffix
        def result
        httpGet(getString.replaceAll(' ', '%20'))
        { resp ->
            if (resp.data)
            {
                logDebug("resp.data = ${resp.data}")
                result = resp.data
            }
        }
        
        return result
    }
    catch (Exception e)
    {
        logDebug("httpGetExec() failed: ${e.message}")
    }
}
